name: Bootstrap Backend

on:
  workflow_dispatch:

jobs:
  bootstrap-backend:
    runs-on: ubuntu-latest
    outputs:
      state_bucket: ${{ steps.out.outputs.bucket }}
      dynamodb_table: ${{ steps.out.outputs.table }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init (bootstrap backend)
        working-directory: bootstrap-backend
        run: terraform init -input=false -no-color

      - name: Terraform Apply (bootstrap backend)
        id: apply
        working-directory: bootstrap-backend
        run: |
          terraform apply -auto-approve -input=false -no-color 
          
      - name: Read bootstrap outputs (robust Python brace-matching)
        id: out
        working-directory: bootstrap-backend
        run: |
          set -euo pipefail

          if ! command -v terraform >/dev/null 2>&1; then
            echo "ERROR: terraform not on PATH. Ensure setup-terraform ran." >&2
            exit 1
          fi

          # capture terraform output (stdout and stderr)
          terraform output -json > /tmp/tfout.raw 2>/tmp/tfout.err || true

          echo "=== terraform stdout preview (first 200 chars) ==="
          sed -n '1,200p' /tmp/tfout.raw || true
          echo "=== terraform stderr preview (first 200 chars) ==="
          sed -n '1,200p' /tmp/tfout.err || true

          # Use Python to find first '{' and then find matching closing '}' by counting braces.
          python3 - <<'PY' > /tmp/tfout.json 2>/tmp/tfout.pyerr || true
          import sys
          raw = ""
          try:
              with open("/tmp/tfout.raw","r") as f:
                  raw = f.read()
          except Exception as e:
              sys.stderr.write("python: failed reading /tmp/tfout.raw: %s\n" % e)
              sys.exit(2)
          
          start = raw.find('{')
          if start == -1:
              sys.stderr.write("python: no '{' found in raw terraform output\n")
              sys.exit(3)
          
          # walk to find matching closing brace
          depth = 0
          end = -1
          for i in range(start, len(raw)):
              c = raw[i]
              if c == '{':
                  depth += 1
              elif c == '}':
                  depth -= 1
                  if depth == 0:
                      end = i
                      break
          
          if end == -1:
              sys.stderr.write("python: no matching closing '}' found (incomplete JSON)\n")
              sys.exit(4)
          
          json_text = raw[start:end+1]
          sys.stdout.write(json_text)
          PY

          echo "=== sanitized JSON preview (first 400 chars) ==="
          sed -n '1,400p' /tmp/tfout.json || true

          # validate sanitized JSON with jq
          if ! jq empty /tmp/tfout.json >/dev/null 2>&1; then
            echo "ERROR: sanitized terraform output is not valid JSON. Showing content:" >&2
            sed -n '1,800p' /tmp/tfout.json >&2 || true
            exit 1
          fi

          # extract outputs; supports .value wrapper or direct values
          S3_BUCKET=$(jq -r '(.s3_bucket.value // .s3_bucket // (.s3_bucket[0] // empty) // empty) | tostring' /tmp/tfout.json || true)
          DDB_TABLE=$(jq -r '(.dynamodb_table.value // .dynamodb_table // (.dynamodb_table[0] // empty) // empty) | tostring' /tmp/tfout.json || true)

          if [ -z "$S3_BUCKET" ] || [ "$S3_BUCKET" = "null" ]; then
            echo "ERROR: could not extract s3_bucket from terraform output. Full sanitized JSON:" >&2
            sed -n '1,800p' /tmp/tfout.json >&2 || true
            exit 1
          fi
          if [ -z "$DDB_TABLE" ] || [ "$DDB_TABLE" = "null" ]; then
            echo "ERROR: could not extract dynamodb_table from terraform output. Full sanitized JSON:" >&2
            sed -n '1,800p' /tmp/tfout.json >&2 || true
            exit 1
          fi

          # set outputs for downstream jobs
          printf "bucket=%s\n" "$S3_BUCKET" >> "$GITHUB_OUTPUT"
          printf "table=%s\n" "$DDB_TABLE" >> "$GITHUB_OUTPUT"

          echo "Bootstrap outputs: bucket=$S3_BUCKET, table=$DDB_TABLE"
