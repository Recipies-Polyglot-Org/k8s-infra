name: Deploy Runner (Terraform) - post-apply registration

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        working-directory: terra
        run: terraform init -input=false -no-color

      - name: Terraform Apply
        working-directory: terra
        run: terraform apply -auto-approve -input=false -no-color

      - name: Get runner public IP (via AWS CLI)
        id: tfout
        run: |
          # find running instance by Name tag "Akshat-terra" and get its public IP
          IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Akshat-terra" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].PublicIpAddress" --output text | awk '{print $1}')
          IP=$(printf "%s" "$IP" | tr -d '\r\n')
          if [ -z "$IP" ] || [ "$IP" = "None" ]; then
            echo "Error: could not find public IP for instance with Name=Akshat-terra" >&2
            aws ec2 describe-instances --filters "Name=tag:Name,Values=Akshat-terra" --query "Reservations[].Instances[].[InstanceId,State.Name,PublicIpAddress,Tags]" --output table >&2 || true
            exit 1
          fi
          printf "IP=%s\n" "$IP" >> "$GITHUB_OUTPUT"


      - name: Request fresh GitHub org registration token
        id: regtoken2
        run: |
          ORG="Recipies-Polyglot-Org"
          RESP=$(curl -s -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" -H "Accept: application/vnd.github+json" "https://api.github.com/orgs/${ORG}/actions/runners/registration-token")
          TOKEN=$(echo "$RESP" | jq -r .token)
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Failed to obtain registration token"
            echo "$RESP" >&2
            exit 1
          fi
          printf "token=%s\n" "$TOKEN" >> "$GITHUB_OUTPUT"

      - name: Register runner via SSH (use fresh token)
        id: sshreg
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          RUNNER_IP: ${{ steps.tfout.outputs.IP }}
          REG_TOKEN: ${{ steps.regtoken2.outputs.token }}
        run: |
          set -euo pipefail

          if [ -z "${RUNNER_IP:-}" ]; then
            echo "RUNNER_IP is empty; aborting" >&2
            exit 1
          fi

          # ensure RUNNER_IP contains only allowed hostname/IP characters (basic guard)
          if ! printf "%s" "$RUNNER_IP" | grep -Eq '^([0-9]{1,3}\.){3}[0-9]{1,3}$|^[a-zA-Z0-9.-]+$'; then
            echo "RUNNER_IP contains unexpected characters: '$RUNNER_IP'" >&2
            exit 1
          fi

          # prepare SSH key file
          mkdir -p /tmp/sshkey
          printf "%s\n" "$SSH_KEY" > /tmp/sshkey/id_rsa
          chmod 600 /tmp/sshkey/id_rsa

          # wait for instance to settle
          sleep 10

          # create registration script (YAML-safe small script)
          cat > /tmp/register.sh <<'SCRIPT'
          #!/bin/bash
          set -euo pipefail
          TOKEN="$1"
          RUNNER_DIR="/opt/actions-runner"
          cd "$RUNNER_DIR" || { echo "runner dir not found"; exit 1; }
          sudo -u githubrunner bash -lc "./config.sh --unattended --url https://github.com/Recipies-Polyglot-Org --token \"$TOKEN\" --name runner-manual-$(hostname)-$(date +%s) --labels self-hosted,linux,X64 --work _work --replace || true"
          # create systemd unit via printf
          sudo bash -lc 'printf "%s\n" "[Unit]" "Description=GitHub Actions Runner" "After=network.target" "" "[Service]" "Type=simple" "User=githubrunner" "WorkingDirectory=/opt/actions-runner" "ExecStart=/opt/actions-runner/run.sh" "Restart=always" "RestartSec=5s" "" "[Install]" "WantedBy=multi-user.target" > /etc/systemd/system/github-runner.service'
          sudo systemctl daemon-reload
          sudo systemctl enable --now github-runner.service || true
          sudo systemctl status github-runner.service --no-pager || true
          SCRIPT

          chmod +x /tmp/register.sh

          # copy script to remote and execute it with the token
          scp -o StrictHostKeyChecking=no -i /tmp/sshkey/id_rsa /tmp/register.sh "ubuntu@${RUNNER_IP}:/tmp/register.sh"
          ssh -o StrictHostKeyChecking=no -i /tmp/sshkey/id_rsa "ubuntu@${RUNNER_IP}" "sudo /bin/bash /tmp/register.sh '${REG_TOKEN}'"

          echo "registration ssh step completed"

          echo "registration ssh step completed"
