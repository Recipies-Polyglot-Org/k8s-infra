name: Deploy Runner (Terraform) - post-apply registration

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        working-directory: terra
        run: terraform init -input=false -no-color

      - name: Terraform Apply
        working-directory: terra
        run: terraform apply -auto-approve -input=false -no-color

      - name: Get runner public IP
        working-directory: terra
        id: tfout
        run: |
          # use -raw and then sanitize: take first non-empty line and strip CR/LF
          IP_RAW=$(terraform output -raw runner_public_ip 2>/dev/null || true)
          # keep only the first whitespace-delimited token, remove CR/LF
          IP=$(printf "%s" "$IP_RAW" | awk '{print $1}' | tr -d '\r\n')
          if [ -z "$IP" ]; then
            echo "Error: runner_public_ip is empty" >&2
            exit 1
          fi
          # write workflow output safely
          printf "IP=%s\n" "$IP" >> "$GITHUB_OUTPUT"


      - name: Request fresh GitHub org registration token
        id: regtoken2
        run: |
          ORG="Recipies-Polyglot-Org"
          RESP=$(curl -s -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" -H "Accept: application/vnd.github+json" "https://api.github.com/orgs/${ORG}/actions/runners/registration-token")
          TOKEN=$(echo "$RESP" | jq -r .token)
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Failed to obtain registration token"
            echo "$RESP" >&2
            exit 1
          fi
          echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

      - name: Register runner via SSH (use fresh token)
        id: sshreg
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          RUNNER_IP: ${{ steps.tfout.outputs.IP }}
          REG_TOKEN: ${{ steps.regtoken2.outputs.token }}
        run: |
          set -euo pipefail

          # prepare SSH key
          mkdir -p /tmp/sshkey
          echo "$SSH_KEY" > /tmp/sshkey/id_rsa
          chmod 600 /tmp/sshkey/id_rsa

          # small pause so instance finishes boot/cloud-init
          sleep 10

          # Create the register script using printf (YAML-safe)
          printf "%s\n" '#!/bin/bash' 'set -euo pipefail' '' 'TOKEN="$1"' 'RUNNER_DIR="/opt/actions-runner"' '' 'cd "$RUNNER_DIR" || { echo "runner dir not found"; exit 1; }' '' 'sudo -u githubrunner bash -lc "./config.sh --unattended --url https://github.com/Recipies-Polyglot-Org --token \"'$TOKEN'\" --name runner-manual-$(hostname)-$(date +%s) --labels self-hosted,linux,X64 --work _work --replace || true"' '' 'sudo bash -c '\''printf "%s\n" "[Unit]" "Description=GitHub Actions Runner" "After=network.target" "" "[Service]" "Type=simple" "User=githubrunner" "WorkingDirectory=/opt/actions-runner" "ExecStart=/opt/actions-runner/run.sh" "Restart=always" "RestartSec=5s" "" "[Install]" "WantedBy=multi-user.target" > /etc/systemd/system/github-runner.service'\''' > /tmp/register.sh

          chmod +x /tmp/register.sh

          # copy script to remote and execute with token argument
          scp -o StrictHostKeyChecking=no -i /tmp/sshkey/id_rsa /tmp/register.sh ubuntu@"$RUNNER_IP":/tmp/register.sh
          ssh -o StrictHostKeyChecking=no -i /tmp/sshkey/id_rsa ubuntu@"$RUNNER_IP" "sudo /bin/bash /tmp/register.sh '$REG_TOKEN'"

          echo "registration ssh step completed"
